@model IEnumerable<DetailsInstallmentRequest>
@using Ramz_Elktear.core.DTO.InstallmentRequestModels

<h3>@Localizer["InstallmentRequestsTitle", "InstallmentRequest"]</h3>

<!-- Filter Form -->
<form method="get" asp-action="Index">
    <div class="row mb-3">
        <div class="col-md-2">
            <input type="text" name="Id" class="form-control" placeholder="@Localizer["RequestIdPlaceholder", "InstallmentRequest"]" value="@Context.Request.Query["Id"]" />
        </div>
        <div class="col-md-2">
            <input type="text" name="UserId" class="form-control" placeholder="@Localizer["UserIdPlaceholder", "InstallmentRequest"]" value="@Context.Request.Query["UserId"]" />
        </div>
        <div class="col-md-2">
            <select name="Status" class="form-control">
                <option value="">@Localizer["AllStatuses", "InstallmentRequest"]</option>
                @foreach (var status in Enum.GetValues(typeof(InstallmentStatus)))
                {
                    <option value="@status" selected="@(Context.Request.Query["Status"] == status.ToString())">@Localizer[$"Status_{status}", "InstallmentRequest"]</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary">@Localizer["FilterButton", "Common"]</button>
        </div>
    </div>
</form>

<!-- Installment Requests Table -->
<table class="table">
    <thead>
        <tr>
            <th>@Localizer["NumberColumn", "Common"]</th>
            <th>@Localizer["UserIdColumn", "InstallmentRequest"]</th>
            <th>@Localizer["CarIdColumn", "InstallmentRequest"]</th>
            <th>@Localizer["BankIdColumn", "InstallmentRequest"]</th>
            <th>@Localizer["StatusColumn", "Common"]</th>
            <th>@Localizer["ActionsColumn", "Common"]</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Any())
        {
            int index = 1;
            foreach (var request in Model)
            {
                <tr>
                    <td>@index</td>
                    <td>@request.User.FullName</td>
                    <td>@request.Car.NameAr</td>
                    <td>@request.Bank.Name</td>
                    <td>
                        <select class="form-control status-dropdown" data-id="@request.Id">
                            @foreach (var status in Enum.GetValues(typeof(InstallmentStatus)))
                            {
                                <option value="@status" selected="@(request.Status == (InstallmentStatus)status)">
                                    <span class="text-truncate">@Localizer[$"Status_{status}", "InstallmentRequest"]</span>
                                </option>
                            }
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-danger delete-btn" data-id="@request.Id">@Localizer["DeleteButton", "Common"]</button>
                    </td>
                </tr>
                index++;
            }
        }
        else
        {
            <tr><td colspan="6" class="text-center">@Localizer["NoInstallmentRequestsFound", "InstallmentRequest"]</td></tr>
        }
    </tbody>
</table>

<script>
    async function updateStatus(requestId, newStatus) {
        try {
            let response = await fetch(`/InstallmentRequest/UpdateStatus?id=${requestId}&status=${newStatus}`, {
                method: 'GET'
            });
            let data = await response.json();
            if (data.success) {
                alert('@Localizer["StatusUpdatedSuccessfully", "InstallmentRequest"]');
            } else {
                alert('@Localizer["FailedToUpdateStatus", "InstallmentRequest"]');
            }
        } catch (error) {
            console.error("Error updating status:", error);
            alert('@Localizer["ErrorOccurredWhileUpdatingStatus", "InstallmentRequest"]');
        }
    }

    async function deleteRequest(requestId) {
        try {
            if (confirm('@Localizer["ConfirmDeleteRequest", "InstallmentRequest"]')) {
                let response = await fetch(`/InstallmentRequest/Delete?id=${requestId}`, {
                    method: 'GET'
                });
                let data = await response.json();
                if (data.success) {
                    alert('@Localizer["RequestDeletedSuccessfully", "InstallmentRequest"]');
                    location.reload();
                } else {
                    alert('@Localizer["FailedToDeleteRequest", "InstallmentRequest"]');
                }
            }
        } catch (error) {
            console.error("Error deleting request:", error);
            alert('@Localizer["ErrorOccurredWhileDeletingRequest", "InstallmentRequest"]');
        }
    }

    document.querySelectorAll('.status-dropdown').forEach(item => {
        item.addEventListener('change', async function () {
            let requestId = this.getAttribute('data-id');
            let newStatus = this.value;
            await updateStatus(requestId, newStatus);
        });
    });

    document.querySelectorAll('.delete-btn').forEach(item => {
        item.addEventListener('click', async function () {
            let requestId = this.getAttribute('data-id');
            await deleteRequest(requestId);
        });
    });
</script>