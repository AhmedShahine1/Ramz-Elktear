@model ChangePasswordViewModel
@{
    ViewData["Title"] = @Localizer["ChangePassword", "User"];
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <!-- Header Section -->
            <div class="text-center mb-4">
                <div class=" bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3"
                     style="width: 80px; height: 80px;">
                    <i class="fas fa-lock fa-2x"></i>
                </div>
                <h2 class="text-dark fw-bold mb-2">@Localizer["ChangePassword", "User"]</h2>
                <p class="text-muted mb-0">
                    @Localizer["UpdatePasswordFor", "User"] <strong class="text-dark">@Model.UserName</strong>
                </p>
            </div>

            <!-- Main Card -->
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success border-0 shadow-sm mb-4" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle text-success me-3"></i>
                                <div>
                                    <strong>@Localizer["Success", "Common"]</strong>
                                    <div>@TempData["SuccessMessage"]</div>
                                </div>
                            </div>
                        </div>
                    }

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger border-0 shadow-sm mb-4">
                            <div class="d-flex align-items-start">
                                <i class="fas fa-exclamation-triangle text-danger me-3 mt-1"></i>
                                <div>
                                    <strong>@Localizer["PleaseCorrectErrors", "Common"]</strong>
                                    <div asp-validation-summary="All" class="mb-0 mt-2"></div>
                                </div>
                            </div>
                        </div>
                    }

                    <form asp-action="ChangePassword" method="post" id="changePasswordForm">
                        @Html.AntiForgeryToken()

                        <input asp-for="UserId" type="hidden" />
                        <input asp-for="UserName" type="hidden" />
                        <input asp-for="ChangePasswordModel.UserId" type="hidden" />

                        <!-- Current Password -->
                        <div class="mb-4">
                            <label asp-for="ChangePasswordModel.CurrentPassword" class="form-label fw-semibold text-dark mb-2">
                                <i class="fas fa-lock text-muted me-2"></i>
                                @Localizer["CurrentPassword", "User"]
                                <span class="text-danger">*</span>
                            </label>
                            <div class="position-relative">
                                <input asp-for="ChangePasswordModel.CurrentPassword"
                                       class="form-control form-control-lg border-2 pe-5"
                                       placeholder="@Localizer["CurrentPasswordPlaceholder", "User"]"
                                       type="password"
                                       style="padding-right: 3rem;" />
                                <button class="btn btn-link position-absolute top-50 end-0 translate-middle-y me-2 p-0 border-0"
                                        type="button"
                                        onclick="togglePassword('ChangePasswordModel_CurrentPassword', this)"
                                        title="@Localizer["ShowPassword", "User"]"
                                        style="z-index: 5;">
                                    <i class="fas fa-eye text-muted"></i>
                                </button>
                            </div>
                            <span asp-validation-for="ChangePasswordModel.CurrentPassword" class="text-danger small"></span>
                        </div>

                        <!-- New Password -->
                        <div class="mb-4">
                            <label asp-for="ChangePasswordModel.NewPassword" class="form-label fw-semibold text-dark mb-2">
                                <i class="fas fa-key text-muted me-2"></i>
                                @Localizer["NewPassword", "User"]
                                <span class="text-danger">*</span>
                            </label>
                            <div class="position-relative">
                                <input asp-for="ChangePasswordModel.NewPassword"
                                       class="form-control form-control-lg border-2 pe-5"
                                       placeholder="@Localizer["NewPasswordPlaceholder", "User"]"
                                       type="password"
                                       onkeyup="checkPasswordStrength(this.value)"
                                       style="padding-right: 3rem;" />
                                <button class="btn btn-link position-absolute top-50 end-0 translate-middle-y me-2 p-0 border-0"
                                        type="button"
                                        onclick="togglePassword('ChangePasswordModel_NewPassword', this)"
                                        title="@Localizer["ShowPassword", "User"]"
                                        style="z-index: 5;">
                                    <i class="fas fa-eye text-muted"></i>
                                </button>
                            </div>
                            <span asp-validation-for="ChangePasswordModel.NewPassword" class="text-danger small"></span>

                            <!-- Password Strength Indicator -->
                            <div class="mt-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <small class="text-muted fw-medium">@Localizer["PasswordStrength", "User"]</small>
                                    <small id="passwordStrengthText" class="fw-semibold"></small>
                                </div>
                                <div class="progress shadow-sm" style="height: 8px;">
                                    <div id="passwordStrengthBar"
                                         class="progress-bar progress-bar-striped progress-bar-animated"
                                         role="progressbar"
                                         style="width: 0%"></div>
                                </div>
                            </div>

                            <!-- Password Requirements -->
                            <div class="mt-3 p-3 bg-light rounded-3 border">
                                <div class="d-flex align-items-start">
                                    <i class="fas fa-info-circle text-primary me-2 mt-1"></i>
                                    <div>
                                        <small class="text-dark fw-medium">@Localizer["PasswordRequirements", "User"]</small>
                                        <ul class="list-unstyled mt-2 mb-0 small text-muted">
                                            <li><i class="fas fa-check text-success me-1"></i> @Localizer["PasswordRequirement1", "User"]</li>
                                            <li><i class="fas fa-check text-success me-1"></i> @Localizer["PasswordRequirement2", "User"]</li>
                                            <li><i class="fas fa-check text-success me-1"></i> @Localizer["PasswordRequirement3", "User"]</li>
                                            <li><i class="fas fa-check text-success me-1"></i> @Localizer["PasswordRequirement4", "User"]</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-4">
                            <label asp-for="ChangePasswordModel.ConfirmPassword" class="form-label fw-semibold text-dark mb-2">
                                <i class="fas fa-check-double text-muted me-2"></i>
                                @Localizer["ConfirmPassword", "User"]
                                <span class="text-danger">*</span>
                            </label>
                            <div class="position-relative">
                                <input asp-for="ChangePasswordModel.ConfirmPassword"
                                       class="form-control form-control-lg border-2 pe-5"
                                       placeholder="@Localizer["ConfirmPasswordPlaceholder", "User"]"
                                       type="password"
                                       style="padding-right: 3rem;" />
                                <button class="btn btn-link position-absolute top-50 end-0 translate-middle-y me-2 p-0 border-0"
                                        type="button"
                                        onclick="togglePassword('ChangePasswordModel_ConfirmPassword', this)"
                                        title="@Localizer["ShowPassword", "User"]"
                                        style="z-index: 5;">
                                    <i class="fas fa-eye text-muted"></i>
                                </button>
                            </div>
                            <span asp-validation-for="ChangePasswordModel.ConfirmPassword" class="text-danger small"></span>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex gap-3 mt-4">
                            <button type="submit" class="btn btn-primary btn-lg px-4 flex-fill" id="submitBtn">
                                <i class="fas fa-save me-2"></i>
                                @Localizer["ChangePassword", "User"]
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Security Notice -->
            <div class="mt-4 p-3 bg-light rounded-3 border">
                <div class="d-flex align-items-start">
                    <i class="fas fa-shield-alt text-warning me-3 mt-1"></i>
                    <div>
                        <h6 class="text-dark mb-1">@Localizer["SecurityNotice", "User"]</h6>
                        <small class="text-muted">
                            @Localizer["SecurityNoticeText", "User"]
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Localized text variables
        var localizedText = {
            showPassword: '@Localizer["ShowPassword", "User"]',
            hidePassword: '@Localizer["HidePassword", "User"]',
            updatingPassword: '@Localizer["UpdatingPassword", "User"]',
            changePassword: '@Localizer["ChangePassword", "User"]',
            veryWeak: '@Localizer["VeryWeak", "User"]',
            weak: '@Localizer["Weak", "User"]',
            fair: '@Localizer["Fair", "User"]',
            good: '@Localizer["Good", "User"]',
            strong: '@Localizer["Strong", "User"]'
        };

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Password visibility toggle
        function togglePassword(inputId, button) {
            const input = document.getElementById(inputId);
            const icon = button.querySelector('i');

            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
                button.setAttribute('title', localizedText.hidePassword);
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
                button.setAttribute('title', localizedText.showPassword);
            }
        }

        // Enhanced password strength checker
        function checkPasswordStrength(password) {
            const strengthBar = document.getElementById('passwordStrengthBar');
            const strengthText = document.getElementById('passwordStrengthText');

            if (!strengthBar || !strengthText) return;

            let strength = 0;
            let strengthLabel = '';
            let strengthClass = '';

            // Check criteria
            if (password.length >= 6) strength += 1;
            if (password.match(/[a-z]/)) strength += 1;
            if (password.match(/[A-Z]/)) strength += 1;
            if (password.match(/[0-9]/)) strength += 1;
            if (password.match(/[^a-zA-Z0-9]/)) strength += 1;

            // Determine strength level
            switch (strength) {
                case 0:
                case 1:
                    strengthLabel = localizedText.veryWeak;
                    strengthClass = 'bg-danger';
                    break;
                case 2:
                    strengthLabel = localizedText.weak;
                    strengthClass = 'bg-warning';
                    break;
                case 3:
                    strengthLabel = localizedText.fair;
                    strengthClass = 'bg-info';
                    break;
                case 4:
                    strengthLabel = localizedText.good;
                    strengthClass = 'bg-success';
                    break;
                case 5:
                    strengthLabel = localizedText.strong;
                    strengthClass = 'bg-success';
                    break;
            }

            // Update UI
            const percentage = (strength / 5) * 100;
            strengthBar.style.width = percentage + '%';
            strengthBar.className = 'progress-bar progress-bar-striped progress-bar-animated ' + strengthClass;
            strengthText.textContent = strengthLabel;
            strengthText.className = 'fw-semibold small ' + (
                strengthClass.includes('danger') ? 'text-danger' :
                strengthClass.includes('warning') ? 'text-warning' :
                strengthClass.includes('info') ? 'text-info' : 'text-success'
            );
        }

        // Form submission handling
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('changePasswordForm');
            const submitBtn = document.getElementById('submitBtn');

            if (form && submitBtn) {
                form.addEventListener('submit', function(e) {
                    submitBtn.disabled = true;
                    const originalContent = submitBtn.innerHTML;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>' + localizedText.updatingPassword;
                    submitBtn.classList.add('btn-secondary');
                    submitBtn.classList.remove('btn-primary');

                    // Re-enable button after timeout (in case of validation errors)
                    setTimeout(() => {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalContent;
                        submitBtn.classList.remove('btn-secondary');
                        submitBtn.classList.add('btn-primary');
                    }, 5000);
                });
            }
        });

        // Toast notification system
        function showToast(type, message) {
            const toastContainer = document.getElementById('toastContainer') || createToastContainer();

            const toast = document.createElement('div');
            toast.className = `toast align-items-center border-0 show shadow-sm`;
            toast.setAttribute('role', 'alert');

            const bgClass = type === 'success' ? 'bg-success' :
                           type === 'danger' ? 'bg-danger' :
                           type === 'warning' ? 'bg-warning' : 'bg-info';

            toast.classList.add(bgClass, 'text-white');

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas ${type === 'success' ? 'fa-check-circle' :
                                       type === 'danger' ? 'fa-exclamation-circle' :
                                       type === 'warning' ? 'fa-exclamation-triangle' : 'fa-info-circle'} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" onclick="this.closest('.toast').remove()"></button>
                </div>
            `;

            toastContainer.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toastContainer';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
            return container;
        }
    </script>
}