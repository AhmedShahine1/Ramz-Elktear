@model CarDTO

@{
    var isRightToLeft = CultureInfo.CurrentCulture.TextInfo.IsRightToLeft;
    var direction = isRightToLeft ? "rtl" : "ltr";
    var textAlign = isRightToLeft ? "text-end" : "text-start";
    var marginClass = isRightToLeft ? "ms-2" : "me-2";
    var marginClassReverse = isRightToLeft ? "me-2" : "ms-2";
    var badgePosition = isRightToLeft ? "start-0" : "end-0";
    var iconMargin = isRightToLeft ? "ms-3" : "me-3";
    var buttonIconMargin = isRightToLeft ? "ms-2" : "me-2";
    var tabIconMargin = isRightToLeft ? "ms-2" : "me-2";
    var textDirection = isRightToLeft ? "text-end" : "text-start";
    var saudiCulture = new CultureInfo("ar-SA");

    // Combine all exterior images
    var exteriorImages = new List<string>();
    if (!string.IsNullOrEmpty(Model.ImageUrl))
        exteriorImages.Add(Model.ImageUrl);
    if (!string.IsNullOrEmpty(Model.ImageWithoutBackgroundUrl))
        exteriorImages.Add(Model.ImageWithoutBackgroundUrl);
    if (Model.ImagesUrl?.Any() == true)
        exteriorImages.AddRange(Model.ImagesUrl);

    var hasExteriorImages = exteriorImages.Any();
    var hasInteriorImages = Model.InsideCarImagesUrl?.Any() == true;

    // Technical details dictionary
    var techDetails = new Dictionary<string, object>
    {
        { "ModelYear", Model.ModelYear?.Name },
        { "EnginePosition", isRightToLeft ? Model.EnginePosition?.NameAr : Model.EnginePosition?.NameEn },
        { "TransmissionType", isRightToLeft ? Model.TransmissionType?.NameAr : Model.TransmissionType?.NameEn },
        { "EngineSize", isRightToLeft ? Model.EngineSize?.NameAr : Model.EngineSize?.NameEn },
        { "Option", isRightToLeft ? Model.Option?.NameAr : Model.Option?.NameEn },
        { "Origin", isRightToLeft ? Model.Origin?.NameAr : Model.Origin?.NameEn }
    };
}

@section Styles {
    <link href="~/assets/css/car-details.css" rel="stylesheet" />
    <style>
        .color-swatch {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: inline-block;
            margin: 0 5px;
            border: 2px solid #dee2e6;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .color-swatch:hover {
                transform: scale(1.1);
                border-color: #007bff;
            }

            .color-swatch.active {
                border-color: #007bff;
                border-width: 3px;
                transform: scale(1.1);
            }

                .color-swatch.active::after {
                    content: '✓';
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    color: white;
                    font-weight: bold;
                    text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
                }

        .color-info {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .color-name {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .color-image-indicator {
            position: absolute;
            top: -2px;
            right: -2px;
            background: #007bff;
            color: white;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
    </style>
}

<div class="container-fluid car-details-container" dir="@direction">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <!-- Car Information Section -->
                <div class="col-md-6 mb-4 mb-md-0">
                    <h1 class="hero-title">
                        @(isRightToLeft? Model.NameAr: Model.NameEn)
                    </h1>
                    <p class="hero-description">
                        @(isRightToLeft? Model.DescrptionAr: Model.DescrptionEn)
                    </p>
                </div>

                <!-- Price Cards Section -->
                <div class="col-md-6 @textAlign">
                    <div class="price-cards-container">
                        <!-- Selling Price Card -->
                        <div class="price-card mb-3">
                            <small class="price-label">@Localizer["SellingPrice", "Car"]</small>
                            <div class="price-value">@Model.SellingPrice.ToString("C", saudiCulture)</div>
                            <div class="price-type-badge cash-badge">@Localizer["CashPrice", "Car"]</div>
                        </div>

                        <!-- Installment Price Card -->
                        <div class="price-card">
                            <small class="price-label">@Localizer["InstallmentPriceIncludingTax", "Car"]</small>
                            <div class="price-value installment-price">@Model.InstallmentPrice.ToString("C", saudiCulture)</div>
                            <div class="price-type-badge installment-badge">@Localizer["InstallmentPriceIncludingTax", "Car"]</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="container">
        <div class="row g-4">
            <!-- Image Gallery Section -->
            <div class="col-lg-8">
                <div class="image-gallery-section">
                    <!-- Main Image Container -->
                    <div class="main-image-container">
                        <div class="position-relative">
                            <img id="mainImage"
                                 class="main-car-image"
                                 src="@(exteriorImages?.FirstOrDefault() ?? "/images/placeholder.jpg")"
                                 alt="@(isRightToLeft? Model.NameAr: Model.NameEn)"
                                 loading="lazy" />

                            <!-- Status Badges -->
                            <div class="status-badges @badgePosition">
                                @if (Model.IsSpecial)
                                {
                                    <span class="badge bg-warning text-dark rounded-pill shadow-sm">
                                        <i class="bi bi-star-fill @(isRightToLeft ? "ms-1" : "me-1")"></i>
                                        @Localizer["Special", "Car"]
                                    </span>
                                }
                                <span class="badge @(Model.IsActive ? "bg-success" : "bg-secondary") rounded-pill shadow-sm">
                                    <i class="bi bi-@(Model.IsActive ? "check" : "pause")-circle-fill @(isRightToLeft ? "ms-1" : "me-1")"></i>
                                    @Localizer[Model.IsActive ? "Active" : "Inactive", "Common"]
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- Image Thumbnails -->
                    @if (exteriorImages?.Any() == true || Model.InsideCarImagesUrl?.Any() == true)
                    {
                        <div class="card shadow-sm">
                            <div class="card-header bg-white p-0">
                                <ul class="nav nav-tabs card-header-tabs" role="tablist">
                                    @if (exteriorImages?.Any() == true)
                                    {
                                        <li class="nav-item">
                                            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#exterior-images">
                                                <i class="bi bi-car-front @tabIconMargin"></i>
                                                @Localizer["ExteriorImages", "Car"] (<span id="exterior-count">@exteriorImages.Count</span>)
                                            </button>
                                        </li>
                                    }
                                    @if (Model.InsideCarImagesUrl?.Any() == true)
                                    {
                                        <li class="nav-item">
                                            <button class="nav-link @(exteriorImages?.Any() != true ? "active" : "")"
                                                    data-bs-toggle="tab" data-bs-target="#interior-images">
                                                <i class="bi bi-person-arms-up @tabIconMargin"></i>
                                                @Localizer["InteriorImages", "Car"] (@Model.InsideCarImagesUrl.Count)
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div class="card-body">
                                <div class="tab-content">
                                    @if (exteriorImages?.Any() == true)
                                    {
                                        <div class="tab-pane fade show active" id="exterior-images">
                                            <div class="row g-2" id="exterior-thumbnails">
                                                @foreach (var imageUrl in exteriorImages)
                                                {
                                                    <div class="col-6 col-md-4 col-lg-3">
                                                        <div class="thumbnail-container">
                                                            <img src="@imageUrl"
                                                                 class="thumbnail-img"
                                                                 alt="@Localizer["CarThumbnail", "Car"]"
                                                                 loading="lazy"
                                                                 onclick="swapImage(this)"
                                                                 tabindex="0"
                                                                 onkeydown="handleThumbnailKeydown(event, this)" />
                                                            @if (imageUrl == Model.ImageUrl || imageUrl == Model.ImageWithoutBackgroundUrl)
                                                            {
                                                                <i class="bi bi-star-fill thumbnail-badge"></i>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }

                                    @if (Model.InsideCarImagesUrl?.Any() == true)
                                    {
                                        <div class="tab-pane fade @(exteriorImages?.Any() != true ? "show active" : "")" id="interior-images">
                                            <div class="row g-2">
                                                @foreach (var imageUrl in Model.InsideCarImagesUrl)
                                                {
                                                    <div class="col-6 col-md-4 col-lg-3">
                                                        <div class="thumbnail-container">
                                                            <img src="@imageUrl"
                                                                 class="thumbnail-img"
                                                                 alt="@Localizer["InteriorThumbnail", "Car"]"
                                                                 loading="lazy"
                                                                 onclick="swapImage(this)"
                                                                 tabindex="0"
                                                                 onkeydown="handleThumbnailKeydown(event, this)" />
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Car Information Sidebar -->
            <div class="col-lg-4">
                <div class="car-info-sidebar">
                    <div class="card shadow-sm mb-4">
                        <div class="card-body">
                            <h5 class="card-title mb-4">
                                <i class="bi bi-info-circle @iconMargin"></i>
                                @Localizer["QuickInfo", "Car"]
                            </h5>

                            <div class="row g-3">
                                @if (Model.Kilometers.HasValue)
                                {
                                    <div class="col-12">
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-speedometer2"></i>
                                            </div>
                                            <div class="info-content @textDirection">
                                                <small class="info-label">@Localizer["Kilometers", "Car"]</small>
                                                <div class="info-value">@Model.Kilometers.Value.ToString("N0")</div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (Model.SubCategory != null)
                                {
                                    <div class="col-12">
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-grid"></i>
                                            </div>
                                            <div class="info-content @textDirection">
                                                <small class="info-label">@Localizer["SubCategory", "Car"]</small>
                                                <div class="info-value">@(isRightToLeft? Model.SubCategory.NameAr : Model.SubCategory.NameEn)</div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (Model.Color?.Any() == true)
                                {
                                    <div class="col-12">
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-palette"></i>
                                            </div>
                                            <div class="info-content @textDirection">
                                                <small class="info-label">@Localizer["Color", "Car"]</small>
                                                <div class="color-info @(isRightToLeft ? "justify-content-end" : "justify-content-start")">
                                                    <div class="color-swatches d-flex flex-wrap">
                                                        @foreach (var color in Model.Color)
                                                        {
                                                            <span class="color-swatch @(Model.Color.First() == color ? "active" : "")"
                                                                  style="background-color: @color.Value"
                                                                  title="@color.Name"
                                                                  data-color-id="@color.Id"
                                                                  data-color-name="@color.Name"
                                                                  data-color-images="@string.Join(",", color.images ?? new List<string>())"
                                                                  data-bs-toggle="tooltip"
                                                                  onclick="selectColor(this)">
                                                                @if (color.images?.Any() == true)
                                                                {
                                                                    <span class="color-image-indicator">@color.images.Count</span>
                                                                }
                                                            </span>
                                                        }
                                                    </div>
                                                    <div class="color-name ms-2" id="selected-color-name">
                                                        @Model.Color.FirstOrDefault()?.Name
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Information Section -->
        <div class="row mt-5">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-white p-0">
                        <ul class="nav nav-tabs card-header-tabs" role="tablist">
                            <li class="nav-item">
                                <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#details-tab">
                                    <i class="bi bi-info-circle @tabIconMargin"></i>
                                    @Localizer["Details", "Car"]
                                </button>
                            </li>
                            <li class="nav-item">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#specifications-tab">
                                    <i class="bi bi-gear @tabIconMargin"></i>
                                    @Localizer["Specifications", "Car"]
                                </button>
                            </li>
                            <li class="nav-item">
                                <button class="nav-link" data-bs-toggle="tab" data-bs-target="#offers-tab">
                                    <i class="bi bi-gift @tabIconMargin"></i>
                                    @Localizer["Offers", "Car"]
                                </button>
                            </li>
                        </ul>
                    </div>

                    <div class="card-body">
                        <div class="tab-content">
                            <!-- Details Tab -->
                            <div class="tab-pane fade show active" id="details-tab">
                                @if (!string.IsNullOrEmpty(isRightToLeft ? Model.DescrptionAr : Model.DescrptionEn))
                                {
                                    <div class="mb-4">
                                        <h5 class="section-title">@Localizer["Description", "Car"]</h5>
                                        <p class="lead">@(isRightToLeft? Model.DescrptionAr: Model.DescrptionEn)</p>
                                    </div>
                                    <hr class="my-4">
                                }

                                <h5 class="section-title">@Localizer["TechnicalDetails", "Car"]</h5>
                                <div class="row g-3">
                                    @foreach (var detail in techDetails.Where(d => d.Value != null))
                                    {
                                        <div class="col-md-6">
                                            <div class="technical-detail">
                                                <small class="detail-label">@Localizer[detail.Key, "Car"]</small>
                                                <div class="detail-value">@detail.Value</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Specifications Tab -->
                            <div class="tab-pane fade" id="specifications-tab">
                                @if (Model.Specifications?.Any() == true)
                                {
                                    <div class="row g-3">
                                        @foreach (var spec in Model.Specifications)
                                        {
                                            <div class="col-md-6">
                                                <div class="specification-item">
                                                    <i class="bi bi-check-circle-fill text-success @iconMargin"></i>
                                                    <span class="fw-medium">@(isRightToLeft? spec.NameAr: spec.NameEn)</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="bi bi-info-circle empty-state-icon"></i>
                                        <h6 class="empty-state-text">@Localizer["NoSpecificationsAvailable", "Car"]</h6>
                                    </div>
                                }
                            </div>

                            <!-- Offers Tab -->
                            <div class="tab-pane fade" id="offers-tab">
                                @if (Model.Offer?.Any() == true)
                                {
                                    <div class="row g-3">
                                        @foreach (var offer in Model.Offer)
                                        {
                                            <div class="col-md-6">
                                                <div class="offer-item">
                                                    <div class="offer-icon">
                                                        <i class="bi bi-gift-fill"></i>
                                                    </div>
                                                    <h6 class="offer-title">@(isRightToLeft? offer.NameAr: offer.NameEn)</h6>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="bi bi-gift empty-state-icon"></i>
                                        <h6 class="empty-state-text">@Localizer["NoOffersAvailable", "Car"]</h6>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="navigation-section">
            <a href="@Url.Action("Index")" class="btn btn-outline-primary btn-lg back-button">
                <i class="bi bi-arrow-left @marginClass"></i>
                @Localizer["BackToList", "Common"]
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/assets/js/car-details.js"></script>

    <script>
        // Store original exterior images
        const originalExteriorImages = @Html.Raw(Json.Serialize(exteriorImages ?? new List<string>()));

        // Color selection functionality
        function selectColor(colorElement) {
            // Remove active class from all color swatches
            document.querySelectorAll('.color-swatch').forEach(swatch => {
                swatch.classList.remove('active');
            });

            // Add active class to clicked color
            colorElement.classList.add('active');

            // Update color name display
            const colorName = colorElement.getAttribute('data-color-name');
            const selectedColorNameElement = document.getElementById('selected-color-name');
            if (selectedColorNameElement) {
                selectedColorNameElement.textContent = colorName;
            }

            // Get color images (now multiple images)
            const colorImagesStr = colorElement.getAttribute('data-color-images');
            const colorImages = colorImagesStr ? colorImagesStr.split(',').filter(img => img.trim() !== '') : [];

            // Update main image and thumbnails based on color
            updateImagesForColor(colorImages);
        }

        function updateImagesForColor(colorImages) {
            const mainImage = document.getElementById('mainImage');
            const exteriorThumbnails = document.getElementById('exterior-thumbnails');
            const exteriorCount = document.getElementById('exterior-count');

            if (colorImages && colorImages.length > 0) {
                // Update main image to first color-specific image
                mainImage.src = colorImages[0];

                // Create thumbnails for all color images + original images
                let allImages = [];

                // Add color images first
                colorImages.forEach((imageUrl, index) => {
                    if (imageUrl && imageUrl.trim() !== '') {
                        allImages.push(`
                            <div class="col-6 col-md-4 col-lg-3">
                                <div class="thumbnail-container">
                                    <img src="${imageUrl.trim()}"
                                         class="thumbnail-img"
                                         alt="Color Image ${index + 1}"
                                         loading="lazy"
                                         onclick="swapImage(this)"
                                         tabindex="0"
                                         onkeydown="handleThumbnailKeydown(event, this)" />
                                    <i class="bi bi-palette-fill thumbnail-badge text-primary"></i>
                                </div>
                            </div>
                        `);
                    }
                });

                // Add original images
                originalExteriorImages.forEach(imageUrl => {
                    const isMainImage = imageUrl === '@Model.ImageUrl' || imageUrl === '@Model.ImageWithoutBackgroundUrl';
                    allImages.push(`
                        <div class="col-6 col-md-4 col-lg-3">
                            <div class="thumbnail-container">
                                <img src="${imageUrl}"
                                     class="thumbnail-img"
                                     alt="Car Thumbnail"
                                     loading="lazy"
                                     onclick="swapImage(this)"
                                     tabindex="0"
                                     onkeydown="handleThumbnailKeydown(event, this)" />
                                ${isMainImage ? '<i class="bi bi-star-fill thumbnail-badge"></i>' : ''}
                            </div>
                        </div>
                    `);
                });

                exteriorThumbnails.innerHTML = allImages.join('');
                exteriorCount.textContent = allImages.length;
            } else {
                // Reset to original images if no color-specific images
                mainImage.src = originalExteriorImages[0] || '/images/placeholder.jpg';

                // Reset thumbnails to original
                let originalHTML = '';
                originalExteriorImages.forEach(imageUrl => {
                    const isMainImage = imageUrl === '@Model.ImageUrl' || imageUrl === '@Model.ImageWithoutBackgroundUrl';
                    originalHTML += `
                        <div class="col-6 col-md-4 col-lg-3">
                            <div class="thumbnail-container">
                                <img src="${imageUrl}"
                                     class="thumbnail-img"
                                     alt="Car Thumbnail"
                                     loading="lazy"
                                     onclick="swapImage(this)"
                                     tabindex="0"
                                     onkeydown="handleThumbnailKeydown(event, this)" />
                                ${isMainImage ? '<i class="bi bi-star-fill thumbnail-badge"></i>' : ''}
                            </div>
                        </div>
                    `;
                });

                exteriorThumbnails.innerHTML = originalHTML;
                exteriorCount.textContent = originalExteriorImages.length;
            }
        }

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Set first color as active by default
            const firstColorSwatch = document.querySelector('.color-swatch');
            if (firstColorSwatch && !firstColorSwatch.classList.contains('active')) {
                selectColor(firstColorSwatch);
            }
        });
    </script>
}