@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> SignInManager

@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = LocOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
        .ToList();
    var currentCulture = requestCulture?.RequestCulture.Culture.Name ?? "en";
    var isRtl = currentCulture == "ar";
    var returnUrl = Context.Request.Path + Context.Request.QueryString;

    var userProfileImage = Context.Request.Cookies["userProfileImage"];
    var userName = Context.Request.Cookies["userName"];
    var userRole = Context.Request.Cookies["userRole"];
}

<!doctype html>
<html lang="@currentCulture" dir="@(isRtl ? "rtl" : "ltr")" class="h-100">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <title>Ramz Elktear</title>
    <meta name="description" content="Modern white and black themed admin dashboard" />
    <link href="~/assets/css/style.css" rel="stylesheet" />
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="~/assets/img/favicon/group 92.ico" />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    @await RenderSectionAsync("Styles", required: false)
    <!-- Font Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

    <!-- Custom SCSS (compile this to CSS) -->
    <link href="~/assets/css/custom-theme.css" rel="stylesheet" />

    <!-- Toastr CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.0.1/css/toastr.css" rel="stylesheet" />

    <!-- Perfect Scrollbar -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/perfect-scrollbar/1.5.0/css/perfect-scrollbar.min.css" rel="stylesheet" />
    <!-- JavaScript Variables -->
    <script>
        var currentCulture = '@currentCulture';
        var isRtl = '@isRtl.ToString().ToLower()' === 'true';
    </script>
</head>

<body class="d-flex flex-column h-100">
    <!-- Layout wrapper -->
    <div class="layout-wrapper d-flex flex-column h-100">
        <!-- Sidebar Menu -->
        <aside id="layout-menu" class="layout-menu d-flex flex-column">
            <!-- Brand Logo -->
            <div class="app-brand d-flex align-items-center justify-content-center py-3">
                <a href="@Url.Action("Index", "Home")" class="app-brand-link">
                    <img src="@Context.Request.Cookies["siteLogo"]" alt="Logo" class="img-fluid" style="max-height: 40px;" />
                </a>
                <button type="button" class="layout-menu-toggle d-xl-none btn btn-sm btn-outline-light ms-auto" data-bs-toggle="offcanvas" data-bs-target="#layout-menu">
                    <i class="bx bx-x"></i>
                </button>
            </div>

            <!-- Navigation Menu -->
            <div class="menu-inner flex-grow-1 overflow-auto">
                @await Html.PartialAsync("_MainMenu")
            </div>
        </aside>

        <!-- Main Content Area -->
        <div class="layout-page d-flex flex-column">
            <!-- Top Navigation Bar -->
            <nav class="layout-navbar navbar navbar-expand-xl bg-white shadow-sm">
                <div class="container-fluid">
                    <!-- Mobile menu toggle -->
                    <button class="navbar-toggler d-xl-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#layout-menu">
                        <i class="bx bx-menu"></i>
                    </button>

                    <!-- Left side - User Profile -->
                    <div class="navbar-nav">
                        <div class="nav-item d-flex align-items-center">
                            <div class="avatar me-3">
                                <img src="@userProfileImage" alt="Profile" class="rounded-circle" width="40" height="40" />
                            </div>
                            <div class="user-info">
                                <h6 class="mb-0 text-dark">@userName</h6>
                                <small class="text-muted">@userRole</small>
                            </div>
                        </div>
                    </div>

                    <!-- Right side - Controls -->
                    <div class="navbar-nav ms-auto d-flex flex-row">
                        <!-- Language Switcher -->
                        <div class="nav-item dropdown me-3">
                            <button class="nav-link btn btn-sm" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bx bx-globe fs-5"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <form asp-controller="Localization" asp-action="SetLanguage" method="post">
                                        <input type="hidden" name="culture" value="en" />
                                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                                        <button type="submit" class="dropdown-item @(currentCulture == "en" ? "active" : "")">
                                            <i class="fi fi-us me-2"></i> English
                                        </button>
                                    </form>
                                </li>
                                <li>
                                    <form asp-controller="Localization" asp-action="SetLanguage" method="post">
                                        <input type="hidden" name="culture" value="ar" />
                                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                                        <button type="submit" class="dropdown-item @(currentCulture == "ar" ? "active" : "")">
                                            <i class="fi fi-sa me-2"></i> العربية
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </div>

                        <!-- Fullscreen Toggle -->
                        <div class="nav-item me-3">
                            <button class="nav-link btn btn-sm" onclick="toggleFullScreen()">
                                <i class="bx bx-fullscreen fs-5"></i>
                            </button>
                        </div>

                        <!-- Logout -->
                        <div class="nav-item">
                            <a class="nav-link btn btn-sm text-danger" href="@Url.Action("Logout", "Auth")">
                                <i class="bx bx-log-out fs-5"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Main Content -->
            <main class="content-wrapper flex-grow-1 p-4">
                <div class="container-fluid">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body p-4">
                            @RenderBody()
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Overlay for mobile menu -->
    <div class="layout-overlay" id="layout-overlay"></div>

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/perfect-scrollbar/1.5.0/js/perfect-scrollbar.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.0.1/js/toastr.min.js"></script>

    <!-- Custom JavaScript -->
    <script>
        // Enhanced Layout JavaScript with Improved Dropdown and RTL Support
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize components
            initializeMobileMenu();
            initializeSidebarDropdowns();
            initializeScrollbar();
            handleRTLLayout();
            setupNavbarFixes();
            setActiveMenu();

            // Mobile menu functionality
            function initializeMobileMenu() {
                const menuToggle = document.querySelector('.navbar-toggler');
                const menu = document.getElementById('layout-menu');
                const overlay = document.getElementById('layout-overlay');
                const closeButton = document.querySelector('.layout-menu-toggle');

                if (menuToggle && menu) {
                    menuToggle.addEventListener('click', function(e) {
                        e.preventDefault();
                        toggleMobileMenu();
                    });
                }

                if (closeButton) {
                    closeButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        closeMobileMenu();
                    });
                }

                if (overlay) {
                    overlay.addEventListener('click', function() {
                        closeMobileMenu();
                    });
                }

                // Close menu on window resize if desktop
                window.addEventListener('resize', function() {
                    if (window.innerWidth >= 1200) {
                        closeMobileMenu();
                    }
                });

                function toggleMobileMenu() {
                    menu.classList.toggle('show');
                    overlay.classList.toggle('show');
                    document.body.classList.toggle('menu-open');
                }

                function closeMobileMenu() {
                    menu.classList.remove('show');
                    overlay.classList.remove('show');
                    document.body.classList.remove('menu-open');
                }
            }

            // Enhanced sidebar dropdown functionality
            function initializeSidebarDropdowns() {
                const menuToggles = document.querySelectorAll('.menu-toggle');

                menuToggles.forEach(function(toggle) {
                    const menuItem = toggle.closest('.menu-item');
                    const subMenu = menuItem.querySelector('.menu-sub');

                    if (subMenu) {
                        // Initialize dropdown state
                        const isActive = menuItem.querySelector('.menu-sub .menu-link.active');
                        if (isActive) {
                            openDropdown(menuItem, subMenu);
                        } else {
                            closeDropdown(menuItem, subMenu);
                        }

                        // Add click handler
                        toggle.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            toggleDropdown(menuItem, subMenu);
                        });
                    }
                });

                function toggleDropdown(menuItem, subMenu) {
                    const isOpen = menuItem.classList.contains('open');

                    // Close all other dropdowns first
                    closeAllDropdowns(menuItem);

                    // Toggle current dropdown
                    if (isOpen) {
                        closeDropdown(menuItem, subMenu);
                    } else {
                        openDropdown(menuItem, subMenu);
                    }
                }

                function openDropdown(menuItem, subMenu) {
                    menuItem.classList.add('open');
                    subMenu.classList.add('open');

                    // Calculate the actual height needed
                    const scrollHeight = subMenu.scrollHeight;
                    subMenu.style.maxHeight = scrollHeight + 'px';

                    // Add opened class to toggle icon
                    const toggle = menuItem.querySelector('.menu-toggle');
                    if (toggle) {
                        toggle.classList.add('open');
                    }
                }

                function closeDropdown(menuItem, subMenu) {
                    menuItem.classList.remove('open');
                    subMenu.classList.remove('open');
                    subMenu.style.maxHeight = '0px';

                    // Remove opened class from toggle icon
                    const toggle = menuItem.querySelector('.menu-toggle');
                    if (toggle) {
                        toggle.classList.remove('open');
                    }
                }

                function closeAllDropdowns(exceptMenuItem = null) {
                    menuToggles.forEach(function(otherToggle) {
                        const otherMenuItem = otherToggle.closest('.menu-item');
                        const otherSubMenu = otherMenuItem.querySelector('.menu-sub');

                        if (otherMenuItem !== exceptMenuItem && otherMenuItem.classList.contains('open')) {
                            closeDropdown(otherMenuItem, otherSubMenu);
                        }
                    });
                }

                // Handle submenu height changes on window resize
                window.addEventListener('resize', function() {
                    const openSubmenus = document.querySelectorAll('.menu-sub.open');
                    openSubmenus.forEach(function(submenu) {
                        submenu.style.maxHeight = submenu.scrollHeight + 'px';
                    });
                });
            }

            // Initialize perfect scrollbar
            function initializeScrollbar() {
                const menuInner = document.querySelector('.menu-inner');
                if (menuInner && typeof PerfectScrollbar !== 'undefined') {
                    new PerfectScrollbar(menuInner, {
                        wheelPropagation: false,
                        suppressScrollX: true
                    });
                }
            }

            // Enhanced RTL layout handling
            function handleRTLLayout() {
                if (typeof isRtl !== 'undefined' && isRtl) {
                    document.documentElement.setAttribute('dir', 'rtl');
                    document.body.classList.add('rtl');

                    // Fix navbar alignment issues in RTL
                    const navbar = document.querySelector('.layout-navbar');
                    if (navbar) {
                        navbar.classList.add('rtl-navbar');
                    }

                    // Fix dropdown positions in RTL
                    const dropdowns = document.querySelectorAll('.dropdown-menu');
                    dropdowns.forEach(function(dropdown) {
                        if (dropdown.classList.contains('dropdown-menu-end')) {
                            dropdown.classList.remove('dropdown-menu-end');
                            dropdown.classList.add('dropdown-menu-start');
                        }
                    });

                    // Fix user profile section layout
                    const userNavItem = document.querySelector('.navbar-nav .nav-item.d-flex');
                    if (userNavItem) {
                        const avatar = userNavItem.querySelector('.avatar');
                        const userInfo = userNavItem.querySelector('.user-info');

                        if (avatar && userInfo) {
                            // Reorder elements for RTL
                            userNavItem.style.flexDirection = 'row-reverse';
                        }
                    }
                }
            }

            // Enhanced navbar fixes for RTL and general issues
            function setupNavbarFixes() {
                const navbarControls = document.querySelector('.navbar-nav.ms-auto');
                if (navbarControls) {
                    // Fix spacing and alignment
                    navbarControls.style.gap = '0.5rem';

                    if (typeof isRtl !== 'undefined' && isRtl) {
                        navbarControls.classList.remove('ms-auto');
                        navbarControls.classList.add('me-auto');
                    }
                }

                // Fix language dropdown positioning
                const langDropdown = document.querySelector('.nav-item.dropdown .dropdown-menu');
                if (langDropdown) {
                    if (typeof isRtl !== 'undefined' && isRtl) {
                        langDropdown.classList.remove('dropdown-menu-end');
                        langDropdown.classList.add('dropdown-menu-start');
                    }
                }

                // Fix user profile section alignment and text direction
                const userProfile = document.querySelector('.navbar-nav .nav-item .user-info');
                if (userProfile && typeof isRtl !== 'undefined' && isRtl) {
                    userProfile.style.textAlign = 'right';
                    userProfile.style.direction = 'rtl';

                    const userNameElement = userProfile.querySelector('h6');
                    const userRoleElement = userProfile.querySelector('small');

                    if (userNameElement) {
                        userNameElement.style.direction = 'rtl';
                        userNameElement.style.textAlign = 'right';
                    }

                    if (userRoleElement) {
                        userRoleElement.style.direction = 'rtl';
                        userRoleElement.style.textAlign = 'right';
                    }
                }

                // Handle navbar layout on mobile for RTL
                const navbar = document.querySelector('.layout-navbar');
                if (navbar && typeof isRtl !== 'undefined' && isRtl) {
                    const handleNavbarLayout = function() {
                        if (window.innerWidth <= 767) {
                            // On mobile, simplify the layout
                            const userInfo = navbar.querySelector('.user-info');
                            if (userInfo) {
                                userInfo.style.display = 'none';
                            }
                        } else {
                            // On desktop, show user info
                            const userInfo = navbar.querySelector('.user-info');
                            if (userInfo) {
                                userInfo.style.display = 'block';
                            }
                        }
                    };

                    window.addEventListener('resize', handleNavbarLayout);
                    handleNavbarLayout(); // Initial call
                }
            }

            // Enhanced active menu highlighting
            function setActiveMenu() {
                const currentPath = window.location.pathname.toLowerCase();
                const menuLinks = document.querySelectorAll('.menu-link');

                menuLinks.forEach(function(link) {
                    const href = link.getAttribute('href');
                    if (href && href !== '#' && href !== 'javascript:void(0);') {
                        const linkPath = href.toLowerCase();

                        // Check if current path matches or contains the link path
                        if (currentPath === linkPath || (linkPath !== '/' && currentPath.includes(linkPath))) {
                            link.classList.add('active');

                            // If it's a submenu item, also open the parent dropdown
                            const parentDropdown = link.closest('.menu-sub');
                            if (parentDropdown) {
                                const parentMenuItem = parentDropdown.closest('.menu-item');
                                const parentToggle = parentMenuItem.querySelector('.menu-toggle');

                                if (parentMenuItem && parentToggle) {
                                    openDropdown(parentMenuItem, parentDropdown);
                                }
                            }
                        }
                    }
                });

                // Helper function to open dropdown (same as in initializeSidebarDropdowns)
                function openDropdown(menuItem, subMenu) {
                    menuItem.classList.add('open');
                    subMenu.classList.add('open');

                    const scrollHeight = subMenu.scrollHeight;
                    subMenu.style.maxHeight = scrollHeight + 'px';

                    const toggle = menuItem.querySelector('.menu-toggle');
                    if (toggle) {
                        toggle.classList.add('open');
                    }
                }
            }

            // Handle dynamic content loading that might affect dropdowns
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList') {
                        // Re-initialize dropdowns if new menu items are added
                        const newMenuToggles = document.querySelectorAll('.menu-toggle:not([data-initialized])');
                        if (newMenuToggles.length > 0) {
                            initializeSidebarDropdowns();
                        }
                    }
                });
            });

            // Start observing menu changes
            const menuInner = document.querySelector('.menu-inner');
            if (menuInner) {
                observer.observe(menuInner, {
                    childList: true,
                    subtree: true
                });
            }
        });

        // Fullscreen toggle function
        function toggleFullScreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen().catch(function(err) {
                    console.log('Error attempting to enable fullscreen:', err);
                });
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                }
            }
        }

        // Utility function to show toast notifications with RTL support
        function showToast(message, type = 'info', title = '') {
            if (typeof toastr !== 'undefined') {
                toastr[type](message, title);
            } else {
                console.log(`${type.toUpperCase()}: ${title} ${message}`);
            }
        }

        // Enhanced toastr configuration with RTL support
        if (typeof toastr !== 'undefined') {
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": true,
                "positionClass": (typeof isRtl !== 'undefined' && isRtl) ? "toast-top-left" : "toast-top-right",
                "preventDuplicates": true,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "tapToDismiss": true
            };
        }
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>